devtools::use_travis()
devtools::use_vignette('ahn')
devtools::load_all(".")
?devtools::use_package
devtools::use_package('matrixcalc')
devtools::use_package('pracma')
devtools::use_package('purrr')
devtools::use_package('pdist')
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
?AHNnD
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
# Create data
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
# Create Sigma list
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Train AHN
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Test AHN
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
lines(x, ysim, type = 'l', col = 'red')
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
library(ahnr)
library(ahnr)
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
plot(x, y, type = 'l')
plot(x, y, type = 'l')
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
ahn <- AHNnD(Sigma, 5, 0.01, 100)
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
library(ahnr)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 100)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 100)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 100)
ahn <- AHNnD(Sigma, 5, 0.01, 100)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
devtools::load_all(".")
devtools::document()
library(ahnr)
library(ahnr)
library(ahnr)
devtools::load_all(".")
devtools::document()
library(ahnr)
devtools::build_win()
devtools::load_all(".")
devtools::document()
library(ahnr)
devtools::document()
devtools::build_win()
sessionInfo()
Sys.setlocale()
Sys.getenv("LC_CTYPE")
library(ahnr)
devtools::load_all(".")
devtools::document()
library(ahnr)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
ahn
ahn <- AHNnD(Sigma, 7, 0.01, 500)
ahn <- AHNnD(Sigma, 8, 0.01, 500)
ahn <- AHNnD(Sigma, 10, 0.01, 500)
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
ahn <- AHNnD(Sigma, 5, 0.01, 500)
ysim <- SimAHNnD(ahn, X)
ahn <- AHNnD(Sigma, 7, 0.01, 500)
ysim <- SimAHNnD(ahn, X)
ahn <- AHNnD(Sigma, 8, 0.01, 500)
ysim <- SimAHNnD(ahn, X)
ahn <- AHNnD(Sigma, 10, 0.01, 500)
ysim <- SimAHNnD(ahn, X)
ahn$network$H$molecule1
ahn$network$H$molecule2
ahn$network$H$molecule3
ahn$network$H$molecule4
ahn$network$H$molecule5
ahn$network$H$molecule6
ahn$network$H$molecule7
ahn$network$H$molecule8
ahn$network$H$molecule9
ahn$network$H$molecule10
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
library(ahnr)
ysim <- SimAHNnD(ahn, X)
library(ahnr)
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
library(ahnr)
ysim <- SimAHNnD(ahn, X)
Phi
H[[i]]
H[[9]]
H[[10]]
posMolecules
molecules$Index
posMolecules$
molecules$X[[1]]
C$Omega
H[[9]]
ki
ahn$network$H
ahn <- AHNnD(Sigma, 9, 0.01, 500)
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 9, 0.01, 500)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
ahn <- AHNnD(Sigma, 10, 0.01, 500)
i
C$Omega[molecules$moleculesUsed[i]]
molecules$moleculesUsed
molecules$SigmaSplit$X
molecules$SigmaSplit$X[2]
molecules$moleculesUsed
molecules$SigmaSplit$X[2]
molecules$SigmaSplit$X[[2]]
molecules$SigmaSplit$X['molecule2']
molecules$SigmaSplit$X['molecule2', 'x']
molecules$SigmaSplit$X[['molecule2']]
ahn <- AHNnD(Sigma, 10, 0.01, 500)
names(molecules$SigmaSplit$X)[i]
names(molecules$SigmaSplit$X)[2]
molecules
ahn <- AHNnD(Sigma, 10, 0.01, 500)
names(molecules$SigmaSplit$X)[i]
names(molecules$SigmaSplit$X)[2]
paste('molecule', 2)
paste('molecule', 2, sep = '')
library(ahnr)
ahn <- AHNnD(Sigma, 10, 0.01, 500)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
ahn <- AHNnD(Sigma, 10, 0.01, 500)
plot(x, y, type = 'l')
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
ysim <- SimAHNnD(ahn, X)
H
ahn <- AHNnD(Sigma, 10, 0.01, 500)
parameters
parameters$H
H
names(molecules$SigmaSplit$X)[moleculeUsed]
library(ahnr)
ahn <- AHNnD(Sigma, 10, 0.01, 500)
H
ahn <- AHNnD(Sigma, 10, 0.01, 500)
ahn$network$H
ahn$network$C
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 10, 0.01, 500)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 10, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
library(ahnr)
# Create data
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(Y$y, type = 'l', col = 'black')
lines(ysim, col = 'red')
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
Sigma <- list(X = X, Y = Y)
ahn <- AHNnD(Sigma, 5, 0.01, 500)
ysim <- SimAHNnD(ahn, X)
plot(Y$y, type = 'l', col = 'black')
lines(ysim, col = 'red')
plot(Y$y, type = 'l', col = 'black')
lines(ysim, col = 'red')
plot(Y$y, type = 'l', col = 'black')
lines(ysim, col = 'red')
plot(Y$y, type = 'l', col = 'black')
lines(ysim, col = 'red')
plot(seq_along(Y$y), Y$y, type = 'l', col = 'black')
lines(seq_along(ysim), ysim, col = 'red')
plot(seq_along(Y$y), Y$y, type = 'l', col = 'black')
lines(seq_along(ysim), ysim, col = 'red')
# Create data
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(seq_along(Y$y), Y$y, type = 'l', col = 'black')
lines(seq_along(ysim), ysim, col = 'red')
