# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
plot(ahn)
# Create data
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(seq_along(Y$y), Y$y, type = 'l', col = 'black')
lines(seq_along(ysim), ysim, col = 'red')
summary(ahn)
plot(ahn)
devtools::document()
library(ahnr)
library(rstan)
example("stan_model", package = "rstan", run.dontrun = TRUE)
library(ahnr)
library(ahnr)
library(ahnr)
library(ahnr)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 1000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
plot(ahn)
# Create data
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(seq_along(Y$y), Y$y, type = 'l', col = 'black')
lines(seq_along(ysim), ysim, col = 'red')
# Create data
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 1000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(seq_along(Y$y), Y$y, type = 'l', col = 'black')
lines(seq_along(ysim), ysim, col = 'red')
summary(ahn)
plot(ahn)
library(ahnr)
library(ahnr)
library(ahnr)
devtools::build_win()
library(ahnr)
devtools::build_win()
library(ahnr)
devtools::build_win()
library(ahnr)
devtools::build_win()
?devtools::use_cran_comments
devtools::use_cran_comments()
library(ahnr)
devtools::build_win()
devtools::release()
install.packages(c("curl", "git2r", "jsonlite", "openssl", "rstudioapi"))
install.packages(c("curl", "git2r", "jsonlite", "openssl", "rstudioapi"))
library(ahnr)
devtools::release()
devtools::use_build_ignore("NEWS.md")
devtools::use_news_md()
devtools::use_build_ignore("NEWS.md")
devtools::release()
devtools::release()
devtools::release()
library(ahnr)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
plot(x, y, type = 'l')
library(ahnr)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
plot(x, y, type = 'l')
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
plot(x, y, type = 'l')
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(100) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
plot(x, y, type = 'l')
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
?AHNnD
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 500)
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 7, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 10, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 7, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
library(ahnr)
# Create data
set.seed(12321)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
plot(ahn)
plot(x, y, type = 'l')
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
summary(ahn)
plot(ahn)
plot(ahn)
?plot
?legend
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't')
lines(seq_along(ysim), ysim, col = 'red')
legend(c('Original', 'Simulation'))
plot(t, Y$y, type = 'l', col = 'black', xlab = 't')
lines(seq_along(ysim), ysim, col = 'red')
legend(11, -0.5, c('Original', 'Simulation'))
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2))
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2))
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1))
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.5)
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.7)
legend(11, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.6)
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.6)
library(ahnr)
# Create data
set.seed(123)
x <- 2 * runif(1000) - 1;
x <- sort(x)
y <- (x < 0.1) * (0.05 * runif(1000) + atan(pi*x)) +
(x >= 0.1 & x < 0.6) * (0.05 * runif(1000) + sin(pi*x)) +
(x >= 0.6) * (0.05 * runif(1000) + cos(pi*x))
plot(x, y, type = 'l')
# Create the Sigma dataset
Sigma <- list(X = data.frame(x = x), Y = data.frame(y = y))
# Create network
ahn <- AHNnD(Sigma, 4, 0.01, 2000)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.6)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.8)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,2), cex = 0.8)
# Create test data
X <- data.frame(x = x)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
plot(x, y, type = 'l')
lines(x, ysim, type = 'l', col = 'red')
legend(-1, 1, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.8)
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,1), cex = 0.6)
summary(ahn)
plot(ahn)
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
# Create data
set.seed(123)
t <- seq(0, 15, 0.01)
X <- data.frame(x1 = cos(t), x2 = t)
Y <- data.frame(y = sin(t))
# Create the Sigma dataset
Sigma <- list(X = X, Y = Y)
# Create network
ahn <- AHNnD(Sigma, 5, 0.01, 2000)
# Simulate
ysim <- SimAHNnD(ahn, X)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = '')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
plot(t, Y$y, type = 'l', col = 'black', xlab = 't', ylab = 'output')
lines(t, ysim, col = 'red')
legend(0, -0.5, c('Original', 'Simulation'), col = c(1,2), lty = c(1,3), cex = 0.6)
summary(ahn)
plot(ahn)
library(ahnr)
devtools::build_win()
